<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="json" type="library" format="ROBOT" generated="20200329 16:15:01">
<version>2.0.9</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>JSON (JavaScript Object Notation) &lt;http://json.org&gt; is a subset of
JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data
interchange format.

:mod:`json` exposes an API familiar to users of the standard library
:mod:`marshal` and :mod:`pickle` modules.  It is derived from a
version of the externally maintained simplejson library.

Encoding basic Python object hierarchies::

    &gt;&gt;&gt; import json
    &gt;&gt;&gt; json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
    '["foo", {"bar": ["baz", null, 1.0, 2]}]'
    &gt;&gt;&gt; print(json.dumps("\"foo\bar"))
    "\"foo\bar"
    &gt;&gt;&gt; print(json.dumps('\u1234'))
    "\u1234"
    &gt;&gt;&gt; print(json.dumps('\\'))
    "\\"
    &gt;&gt;&gt; print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
    {"a": 0, "b": 0, "c": 0}
    &gt;&gt;&gt; from io import StringIO
    &gt;&gt;&gt; io = StringIO()
    &gt;&gt;&gt; json.dump(['streaming API'], io)
    &gt;&gt;&gt; io.getvalue()
    '["streaming API"]'

Compact encoding::

    &gt;&gt;&gt; import json
    &gt;&gt;&gt; mydict = {'4': 5, '6': 7}
    &gt;&gt;&gt; json.dumps([1,2,3,mydict], separators=(',', ':'))
    '[1,2,3,{"4":5,"6":7}]'

Pretty printing::

    &gt;&gt;&gt; import json
    &gt;&gt;&gt; print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))
    {
        "4": 5,
        "6": 7
    }

Decoding JSON::

    &gt;&gt;&gt; import json
    &gt;&gt;&gt; obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]
    &gt;&gt;&gt; json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]') == obj
    True
    &gt;&gt;&gt; json.loads('"\\"foo\\bar"') == '"foo\x08ar'
    True
    &gt;&gt;&gt; from io import StringIO
    &gt;&gt;&gt; io = StringIO('["streaming API"]')
    &gt;&gt;&gt; json.load(io)[0] == 'streaming API'
    True

Specializing JSON object decoding::

    &gt;&gt;&gt; import json
    &gt;&gt;&gt; def as_complex(dct):
    ...     if '__complex__' in dct:
    ...         return complex(dct['real'], dct['imag'])
    ...     return dct
    ...
    &gt;&gt;&gt; json.loads('{"__complex__": true, "real": 1, "imag": 2}',
    ...     object_hook=as_complex)
    (1+2j)
    &gt;&gt;&gt; from decimal import Decimal
    &gt;&gt;&gt; json.loads('1.1', parse_float=Decimal) == Decimal('1.1')
    True

Specializing JSON object encoding::

    &gt;&gt;&gt; import json
    &gt;&gt;&gt; def encode_complex(obj):
    ...     if isinstance(obj, complex):
    ...         return [obj.real, obj.imag]
    ...     raise TypeError(f'Object of type {obj.__class__.__name__} '
    ...                     f'is not JSON serializable')
    ...
    &gt;&gt;&gt; json.dumps(2 + 1j, default=encode_complex)
    '[2.0, 1.0]'
    &gt;&gt;&gt; json.JSONEncoder(default=encode_complex).encode(2 + 1j)
    '[2.0, 1.0]'
    &gt;&gt;&gt; ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))
    '[2.0, 1.0]'


Using json.tool from the shell to validate and pretty-print::

    $ echo '{"json":"obj"}' | python -m json.tool
    {
        "json": "obj"
    }
    $ echo '{ 1.2:3.4}' | python -m json.tool
    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)</doc>
<kw name="Dump">
<arguments>
<arg>obj</arg>
<arg>fp</arg>
<arg>*</arg>
<arg>skipkeys=False</arg>
<arg>ensure_ascii=True</arg>
<arg>check_circular=True</arg>
<arg>allow_nan=True</arg>
<arg>cls=None</arg>
<arg>indent=None</arg>
<arg>separators=None</arg>
<arg>default=None</arg>
<arg>sort_keys=False</arg>
<arg>**kw</arg>
</arguments>
<doc>Serialize ``obj`` as a JSON formatted stream to ``fp`` (a
``.write()``-supporting file-like object).

If ``skipkeys`` is true then ``dict`` keys that are not basic types
(``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped
instead of raising a ``TypeError``.

If ``ensure_ascii`` is false, then the strings written to ``fp`` can
contain non-ASCII characters if they appear in strings contained in
``obj``. Otherwise, all such characters are escaped in JSON strings.

If ``check_circular`` is false, then the circular reference check
for container types will be skipped and a circular reference will
result in an ``OverflowError`` (or worse).

If ``allow_nan`` is false, then it will be a ``ValueError`` to
serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)
in strict compliance of the JSON specification, instead of using the
JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).

If ``indent`` is a non-negative integer, then JSON array elements and
object members will be pretty-printed with that indent level. An indent
level of 0 will only insert newlines. ``None`` is the most compact
representation.

If specified, ``separators`` should be an ``(item_separator, key_separator)``
tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and
``(',', ': ')`` otherwise.  To get the most compact JSON representation,
you should specify ``(',', ':')`` to eliminate whitespace.

``default(obj)`` is a function that should return a serializable version
of obj or raise TypeError. The default simply raises TypeError.

If *sort_keys* is true (default: ``False``), then the output of
dictionaries will be sorted by key.

To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the
``.default()`` method to serialize additional types), specify it with
the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.</doc>
<tags>
</tags>
</kw>
<kw name="Dumps">
<arguments>
<arg>obj</arg>
<arg>*</arg>
<arg>skipkeys=False</arg>
<arg>ensure_ascii=True</arg>
<arg>check_circular=True</arg>
<arg>allow_nan=True</arg>
<arg>cls=None</arg>
<arg>indent=None</arg>
<arg>separators=None</arg>
<arg>default=None</arg>
<arg>sort_keys=False</arg>
<arg>**kw</arg>
</arguments>
<doc>Serialize ``obj`` to a JSON formatted ``str``.

If ``skipkeys`` is true then ``dict`` keys that are not basic types
(``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped
instead of raising a ``TypeError``.

If ``ensure_ascii`` is false, then the return value can contain non-ASCII
characters if they appear in strings contained in ``obj``. Otherwise, all
such characters are escaped in JSON strings.

If ``check_circular`` is false, then the circular reference check
for container types will be skipped and a circular reference will
result in an ``OverflowError`` (or worse).

If ``allow_nan`` is false, then it will be a ``ValueError`` to
serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in
strict compliance of the JSON specification, instead of using the
JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).

If ``indent`` is a non-negative integer, then JSON array elements and
object members will be pretty-printed with that indent level. An indent
level of 0 will only insert newlines. ``None`` is the most compact
representation.

If specified, ``separators`` should be an ``(item_separator, key_separator)``
tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and
``(',', ': ')`` otherwise.  To get the most compact JSON representation,
you should specify ``(',', ':')`` to eliminate whitespace.

``default(obj)`` is a function that should return a serializable version
of obj or raise TypeError. The default simply raises TypeError.

If *sort_keys* is true (default: ``False``), then the output of
dictionaries will be sorted by key.

To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the
``.default()`` method to serialize additional types), specify it with
the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.</doc>
<tags>
</tags>
</kw>
<kw name="Load">
<arguments>
<arg>fp</arg>
<arg>*</arg>
<arg>cls=None</arg>
<arg>object_hook=None</arg>
<arg>parse_float=None</arg>
<arg>parse_int=None</arg>
<arg>parse_constant=None</arg>
<arg>object_pairs_hook=None</arg>
<arg>**kw</arg>
</arguments>
<doc>Deserialize ``fp`` (a ``.read()``-supporting file-like object containing
a JSON document) to a Python object.

``object_hook`` is an optional function that will be called with the
result of any object literal decode (a ``dict``). The return value of
``object_hook`` will be used instead of the ``dict``. This feature
can be used to implement custom decoders (e.g. JSON-RPC class hinting).

``object_pairs_hook`` is an optional function that will be called with the
result of any object literal decoded with an ordered list of pairs.  The
return value of ``object_pairs_hook`` will be used instead of the ``dict``.
This feature can be used to implement custom decoders.  If ``object_hook``
is also defined, the ``object_pairs_hook`` takes priority.

To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
kwarg; otherwise ``JSONDecoder`` is used.</doc>
<tags>
</tags>
</kw>
<kw name="Loads">
<arguments>
<arg>s</arg>
<arg>*</arg>
<arg>encoding=None</arg>
<arg>cls=None</arg>
<arg>object_hook=None</arg>
<arg>parse_float=None</arg>
<arg>parse_int=None</arg>
<arg>parse_constant=None</arg>
<arg>object_pairs_hook=None</arg>
<arg>**kw</arg>
</arguments>
<doc>Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance
containing a JSON document) to a Python object.

``object_hook`` is an optional function that will be called with the
result of any object literal decode (a ``dict``). The return value of
``object_hook`` will be used instead of the ``dict``. This feature
can be used to implement custom decoders (e.g. JSON-RPC class hinting).

``object_pairs_hook`` is an optional function that will be called with the
result of any object literal decoded with an ordered list of pairs.  The
return value of ``object_pairs_hook`` will be used instead of the ``dict``.
This feature can be used to implement custom decoders.  If ``object_hook``
is also defined, the ``object_pairs_hook`` takes priority.

``parse_float``, if specified, will be called with the string
of every JSON float to be decoded. By default this is equivalent to
float(num_str). This can be used to use another datatype or parser
for JSON floats (e.g. decimal.Decimal).

``parse_int``, if specified, will be called with the string
of every JSON int to be decoded. By default this is equivalent to
int(num_str). This can be used to use another datatype or parser
for JSON integers (e.g. float).

``parse_constant``, if specified, will be called with one of the
following strings: -Infinity, Infinity, NaN.
This can be used to raise an exception if invalid JSON numbers
are encountered.

To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
kwarg; otherwise ``JSONDecoder`` is used.

The ``encoding`` argument is ignored and deprecated.</doc>
<tags>
</tags>
</kw>
</keywordspec>
